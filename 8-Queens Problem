def solve_n_queens(n):
    def backtrack(row, cols, diag1, diag2, path):
        if row == n:
            solutions.append(path)
            return
        for col in range(n):
            d1, d2 = row - col, row + col
            if cols[col] or diag1[d1] or diag2[d2]:
                continue
            cols[col] = diag1[d1] = diag2[d2] = True
            backtrack(row+1, cols, diag1, diag2, path + [col])
            cols[col] = diag1[d1] = diag2[d2] = False
    solutions = []
    backtrack(0, [False]*n, [False]*(2*n-1), [False]*(2*n-1), [])
    return solutions

solutions = solve_n_queens(8)
if solutions:
    board = [[0]*8 for _ in range(8)]
    for row, col in enumerate(solutions[0]):
        board[row][col] = 1
    for row in board:
        print(' '.join(map(str, row)))
else:
    print("No solution found.")


OUTPUT:
0 1 0 0 0 0 0 0
0 0 0 1 0 0 0 0
