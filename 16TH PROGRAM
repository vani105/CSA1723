import numpy as np
from keras.models import Sequential
from keras.layers import Dense

# XOR dataset
X = np.array([[0,0], [0,1], [1,0], [1,1]])
y = np.array([[0], [1], [1], [0]])

# Create feedforward neural network model
model = Sequential()
model.add(Dense(4, input_dim=2, activation='relu'))   # Hidden layer with 4 neurons
model.add(Dense(1, activation='sigmoid'))             # Output layer

# Compile the model
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Train the model
model.fit(X, y, epochs=100, verbose=0)

# Predict and display results
print("Predictions:")
predictions = model.predict(X)
for i, pred in enumerate(predictions):
    rounded = round(pred[0])
    print(f"Input: {X[i]} => Predicted: {rounded} (Raw: {pred[0]:.4f})")


OUTPUT:
/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.
  super().__init__(activity_regularizer=activity_regularizer, **kwargs)
Predictions:
1/1 ━━━━━━━━━━━━━━━━━━━━ 0s 57ms/step
Input: [0 0] => Predicted: 0 (Raw: 0.4982)
Input: [0 1] => Predicted: 0 (Raw: 0.4593)
Input: [1 0] => Predicted: 1 (Raw: 0.5263)
Input: [1 1] => Predicted: 1 (Raw: 0.5274)
